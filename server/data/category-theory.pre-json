// Q: Does __type__, __equal__, and/or __equatable__ need their own definitions, or can their meanings be taken for granted?
// A: Let's give each a definition for clarity! In doing so, we'll take the meaning of concepts such as *thing*, *classification*, *statement*, *occurrence*, and *truth* for granted.
{
    "name": "equatable",
    "def": "Given any two things $x, y$ and given any classification of things, we say that $x$ is __equatable to__ $y$ according to the classification if $x$ and $y$ are interchangeable with each other when used as any occurrence within any statement that uses the occurrence as a representative of the classification. Alternatively, we say that $x$ and $y$ are __equatable__ things.",
    "example": [
        "A ripe apple is equatable to a rotten orange according to the classification *fruit*. To illustrate, the statement \"I ate a ripe apple for breakfast\" uses its occurrence of \"a ripe apple\" as a *fruit* just as the statement \"I ate a rotten orange for breakfast\" uses its occurrence of \"a rotten orange\" as a *fruit*.",
        "The color green is equatable to the word edible according to the classification *adjective*. To illustrate, the famous statement \"Colorless green ideas sleep furiously\" uses its occurrence of \"green\" as an *adjective* just the statement \"Colorless edible ideas sleep furiously\" uses its occurrence of \"edible\" as an *adjective*, even though both statements are nonsensical in meaning.",
        "The *integer* 43 is equatable with the *integer* 15. To illustrate, the statement \"43 is odd and 43 is prime\" uses its second occurrence of \"43\" as an *integer* just as the statement \"43 is odd and 15 is prime\" uses its occurrence of \"15\" as an *integer*, even though the former statement is true yet the latter statement is false. Notice that first occurrence of \"43\" remains unaltered across both statements, demonstrating that we are allowed to interchange just some of the occurrences with equatable things.",
    ],
    "counterexample": [
        "A ripe apple is not equatable to a rotten orange according to the classification *apples*. To illustrate, the statement \"I ate a ripe apple for breakfast\" uses its occurrence of \"a ripe apple\" as an item of *apples*, yet the statement \"I ate a rotten orange for breakfast\" does not use its occurrence of \"a rotten orange\" as an item of *apples*.",
    ],
}

{
    "name": "type",
    "def": "A __type__ is a classification of things that are all equatable to each other according to the classification. We say that a thing $x$ __has type__ $T$ if $x$ is classified under $T$; alternatively, we may say that $x$ is __of type__ $T$, or we may directly say that $x$ *is a(n)* $T$, or we may consider $x$ *as a(n)* $T$, or we may even succintly say a $T$ $x$ when clear to do so.",
    "note": "A type will be often denoted in italics whenever a type is used as a *type*. However, beware that not every *italics text* denotes a type.",
    "example": [
        "Both a ripe apple and a rotten orange have type *fruit*",
        "The color green is of type *adjective* just as is the word edible.",
        "The *integer* 43 has been explicitly typed as an *integer* and it is equatable to every integer (including itself).",
    ],
    "counterexample": [
        "An orange is not of type *apples*. To quote a famous idiom: you can't compare *apples* to *oranges*.",
    ],
    "dependencies": ["equatable"],
}

{
    "name": "equal",
    "def": "Two things $x, y$ of type $T$ are __equal__ if they are interchangeable with each other when used as any occurrence within any statement that uses the occurrence as a $T$ *such that statement's truth value does not change*. When we can infer from context that two things $x, y$ have the same type and are considered equal according to their type, we say that $x$ is __equal to__ $y$ and denote this statement as $x = y$, where $x$ occurs on the left side and $y$ occurs on the right side; alternatively, we may say that $x$ __equals__ $y$. The negation of $x = y$ is denoted as $x \\ne y$.",
    "negation": "unequal",
    "intuition": "If you cannot at all tell two things (of a given type) apart, they must be equal!",
    "note": [
        // I want to emphasize this abuse in a note rather than a(n) (counter)example, even though this note illustrates a(n) (counter)example (because I use it as an example of *abuse* and not a(n) (counter)example of *equal*).
        "Both mathematicians and laypeople very often abuse the notion of *equal* with a different-yet-related concept. To illustrate, $4+1$ does not equal $3+2$ when both are considered as *arithmetic expressions*; the reasons are (1) that arithmetic expressions are syntactic constructs and (2) that the $4+1$ and $3+2$ as *syntactic constructs* have different symbols in the first and third positions. When people say that $4+1 = 3+2$, people really mean that both sides *result in* equal values (i.e. the *arithmetic expressions* $4+1$ and $3+2$ both result in the *number* $5$). In order to prevent misunderstandings, we will try to avoid such inexplicit intentions.",
    ],
    "example": [
        "$32 = 32$ when each side is an *integer*. To illustrate, the statement \"32 is even\" has the same truth value as the statement \"32 is even\". Similarly, the statement \"32 is prime\" has the same truth value as the statement \"32 is prime\".",
        "The *rational number* $\\frac{3}{5}$ is equal to the *rational number* $\\frac{6}{10}$. Note that equal rational numbers may have multiple syntactic representations, just as equal numbers may result from multiple arithmetic expressions.",
    ],
    "counterexample": [
        "The *integer* $43$ is not equal to the *integer* $15$. To illustrate, the statement '43 is odd and 43 is prime' is true yet the statement '43 is odd and 15 is prime' is false.",
        "$\\frac{3}{5}$ is unequal to the $\\frac{6}{10}$ as *syntactic representations*, because they use different symbols in the upper and lower positions. (The type really matters!)",
    ],
    "dependencies": ["type"],
}

{
    "def": "An __object__ is any thing of any type.",
    "note": [
        "Any person, place, thing, or idea can be considered an object, as long as its type is inferable from context. In mathematics, we usually study mathematical constructs as objects.",
    ],
    "intuition": "If you can unambiguously identify it (and its type), it must be an object!",
    "example": [
        "The *integer* $-34$.",
        "The *time* 10:42 PM.",
    ],
    "counterexample": [
        "$\\{7, 7\\}$, without any additional context. We can't infer if its type is a *set* or a *multiset* or something else entirely!",
    ],
    "dependencies": ["type"],
}

{
    "name": "Types are objects",
    "theorem": "All types are objects.",
    "proof": {
        "type": "by definition",
        "content": "
            Overview:
                We will prove this theorem in two parts.
                Firstly, we will show that any type $T$ is a thing.
                Secondly, we will show that any type $T$ itself has a type.

            First Part:
                By definition of type, any type $T$ is a particular classification of things.
                A classification is itself a thing.
                Therefore, any type $T$ is a thing.

            Second Part:
                It will suffice to show that there is a classification of things that characterizes any type $T$.
                Observe that, from any definition $d$ of a word $w$ that is also a noun, there is a corresponding classification of things that characterizes the word $w$: namely, the classification of all things that meet the criteria of definition $d$.
                Also observe that the word \"type\" is a noun that has a definition.
                Therefore, there is a classification of all things that meet the criteria of being a type.
                In other words, the word \"type\" is a classification of things that characterizes the criteria of being a type.
                Therefore, by definition of type, any type $T$ is a *type*.

            Conclusion:
                Because any type $T$ is a thing and because any type $T$ has a type (namely: *type*), it follows by definition of object that any type $T$ is an object.
        ",
    },
    "dependencies": ["type", "object"],
}

{
    "weight": 1,
    "exercise": "The *multiset* $\{3, 3, 5\}$ <<[is]|is not>> an object because [[it is a thing and its type is explicitly mentioned, so this statement follows from the definition of __object__]]. Furthermore, it <<[is]|is not>> equatable to the *multiset* $\\{3, 5\\}$ because [[they both have the same type]]. The *syntactic expression* $5+4$ <<[is]|is not>> an object that <<[is not equatable to]|is equatable and unequal to|is equatable and equal to>> to the *integer* evaluated from $5+4$ [[because it is not clear what type to use for classifying both $5+4$ and $9$ consistently with the context]]. $\infty^\infty$ <<is|[is not]>> an object because [[it is not clear from context what the type of infinity is and/or what the type of exponentiation is]]. *Body parts* as a *type* <<is not equatable to|is equatable and unequal to|[is equatable and equal to]>> the *parts of body* as a *type* [[by definition of __type__ because both are interchangeable with each other without affecting the truth values of statements]].",
    "dependencies": ["equatable", "type", "equal", "object"],
}

{
    "def": "A type $T$ is __dependent__ on an object $p$ if the classification of a thing $x$ as a type of $T$ is contingent on the object $p$.",
    "dependencies": ["type", "object"],
}

{
    "def": "When a type $T$ is dependent on an object $p$, we call $p$ a type __parameter__.",
    "dependencies": ["type", "dependent", "object"],
}

{
    "name": "collection",
    "def": "Given a type $T$, a __$T$-collection__ is a type, dependent on parameter $T$, characterizing any particular selection of potentially-repeated things of type $T$.",
    "dependencies": ["type", "dependent", "parameter", "Types are objects"],
}

{
    "def": "Given two objects $x$ and $y$, a __relationship__ is a type, dependent on parameters $x$ and $y$, characterizing a particular connection from $x$ to $y$.",
    "dependencies": ["object", "type", "dependent", "parameter"],
}

{
    "name": "morphism",
    "def": "Given two objects $x$ and $y$ that are of the same type $T$, a __$T$-morphism__ is any *relationship* from $x$ to $y$. When the type $T$ is inferable or ignorable from context, we alternatively call any such relationship a $morphism$ from $x$ to $y$.",
    "dependencies": ["object", "type", "relationship"],
}

{
    "def": "Given a morphism $f$ from objects $x$ to $y$, the __domain__ of a $f$ is $x$, denoted by $\dom f = x$.",
    "dependencies": ["morphism"],
}

{
    "def": "Given a morphism $f$ from objects $x$ to $y$, the __codomain__ of a $f$ is $y$, denoted by $\cod f = y$.",
    "dependencies": ["morphism"],
}

{
    "name": "composable pair",
    "def": "Given a type $T$, a __$T$-composable pair__ is a type, dependent on parameter $T$, characterizing pairs of $T$-morphisms $f$ and $g$ such that $\cod f = \dom g$. We denote a composable pair by $\\langle f, \\rangle g$.",
    "dependencies": ["type", "dependent", "parameter", "Types are objects", "morphism", "domain", "codomain"],
}

// TODO: Describe what a "functional mapping" means.
{
    "def": "Given two types $S$ and $T$, an __operation__ is a type, dependent on parameters $S$ and $T$, characterizing any *functional mapping* from an $S$-collection to a $T$-collection. We denote such such a type as $S-collection \\to T-collection$.",
    "dependencies": ["type", "dependent", "parameter", "Types are objects", "collection"],
}

// TODO: Define associativity, define identity. Maybe actually change this definition to __composition candidate__ that doesn't actually enforce associativity or identity.
{
    "def": "Given a type $T$, a __composition__ is an operation of type $(T-composable\ pair)-collection \\to (T-morphism)-collection$ such that ...",
    "dependencies": ["type", "operation", "composable pair", "collection", "morphism"],
}
